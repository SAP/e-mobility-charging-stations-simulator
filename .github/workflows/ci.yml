name: CI
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  merge_group:
    branches: [main]
jobs:
  check-secrets:
    runs-on: ubuntu-latest
    outputs:
      sonar-token-exists: ${{ steps.sonar-token.outputs.defined }}
    steps:
      - name: Check for SonarCloud Token Availability
        id: sonar-token
        shell: bash
        run: |
          if [ "${{ secrets.SONAR_TOKEN }}" != '' ]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi
  build-ocpp-server:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: [3.12, 3.13]
    name: Build OCPP mock server with Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: tests/ocpp-server
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: poetry
      - name: Install Dependencies
        run: poetry install --no-root
      - name: Lint
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python == '3.12' }}
        run: poetry run task lint
  build-simulator:
    needs: [check-secrets]
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node: ['20.x', '22.x', 'latest']
    name: Build simulator with Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Dependency Review
        if: ${{ github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        uses: actions/dependency-review-action@v4
        with:
          base-ref: ${{ github.ref_name }}
          head-ref: ${{ github.sha }}
      - name: Pull Request Dependency Review
        if: ${{ github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        uses: actions/dependency-review-action@v4
      - uses: pnpm/action-setup@v4
      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: pnpm install
        run: pnpm install --ignore-scripts --frozen-lockfile
      - name: pnpm audit
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        run: pnpm audit --prod
      - name: pnpm lint
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        run: pnpm lint
      - name: pnpm build
        run: pnpm build
      - name: pnpm test
        run: pnpm test
      - name: pnpm coverage
        if: ${{ github.repository == 'sap/e-mobility-charging-stations-simulator' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        run: pnpm coverage
      - name: SonarCloud Scan
        if: ${{ needs.check-secrets.outputs.sonar-token-exists == 'true' && github.repository == 'sap/e-mobility-charging-stations-simulator' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        uses: sonarsource/sonarqube-scan-action@v4.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build-dashboard:
    needs: [check-secrets]
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node: ['18.x', '20.x', '22.x', 'latest']
    name: Build dashboard with Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ui/web
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Dependency Review
        if: ${{ github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        uses: actions/dependency-review-action@v4
        with:
          base-ref: ${{ github.ref_name }}
          head-ref: ${{ github.sha }}
      - name: Pull Request Dependency Review
        if: ${{ github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        uses: actions/dependency-review-action@v4
      - uses: pnpm/action-setup@v4
      - name: Setup node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: pnpm install
        run: pnpm install --ignore-scripts --frozen-lockfile
      - name: pnpm audit
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        run: pnpm audit --prod
      - name: pnpm lint
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        run: pnpm lint
      - name: pnpm build
        run: pnpm build
      - name: pnpm test
        run: pnpm test
      - name: pnpm coverage
        if: ${{ github.repository == 'sap/e-mobility-charging-stations-simulator' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        run: pnpm coverage
      - name: SonarCloud Scan
        if: ${{ needs.check-secrets.outputs.sonar-token-exists == 'true' && github.repository == 'sap/e-mobility-charging-stations-simulator' && matrix.os == 'ubuntu-latest' && matrix.node == '20.x' }}
        uses: sonarsource/sonarqube-scan-action@v4.2.1
        with:
          projectBaseDir: ui/web
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build-simulator-docker-image:
    runs-on: ubuntu-latest
    name: Build simulator docker image
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Build docker image
        run: |
          cd docker
          make SUBMODULES_INIT=false
  build-dashboard-docker-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui/web
    name: Build dashboard docker image
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Build docker image
        run: |
          cd docker
          make SUBMODULES_INIT=false
